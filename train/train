#!/usr/bin/env python3

import tensorflow as tf
import tensorflow_hub as hub
# import tensorflowjs as tfjs

from tensorflow.keras import layers
import tensorflow.keras.backend as K

from tensorflow.python.tools import optimize_for_inference_lib

import os
import sys
import json
import csv
import time
import math

import retrain

__PROD__ = os.environ.get('LOCAL') != 'True'
prefix = '/opt/ml/'

def main():
    if __PROD__:
        print("Running in production")

        from environment import create_trainer_environment
        env = create_trainer_environment()
        
        epochs = env.hyperparameters.get('epochs', default=1, object_type=int)
        steps = env.hyperparameters.get('steps', default=0, object_type=int)
        feature_extractor_url = os.path.join('models', env.hyperparameters.get('module', default="mobilenet_v2_100_224", object_type=str))
        data_root = env.channel_dirs['train']
        
        print('data_root: ' + data_root)
    else:
        print('Running locally')

        epochs = 0
        steps = 1
        feature_extractor_url = "models/inception_v3"
        data_root = tf.keras.utils.get_file(
            'flower_photos','https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz',
            untar=True)

    output_dir = os.path.join(prefix, 'model')
    print('output_dir: ' + output_dir)

    retrain.FLAGS = {
        image_dir: str(data_root),
        output_graph: os.path.join(output_dir, 'frozen.pb'),
        intermediate_output_graphs_dir: '/tmp/intermediate_graph/',
        intermediate_store_frequency: 0,
        output_labels: os.path.join(output_dir, 'labels'),
        summaries_dir: '/tmp/retrain_logs',
        how_many_training_steps: 500,
        learning_rate: 0.01,
        testing_percentage: 10,
        validation_percentage: 10,
        eval_step_interval: 10,
        train_batch_size: 100,
        test_batch_size: 1,
        validation_batch_size: 100,
        print_misclassified_test_images: False,
        bottleneck_dir: '/tmp/bottleneck',
        final_tensor_name: 'output',
        flip_left_right: False,
        random_crop: 0,
        random_scale: 0,
        random_brightness: 0,
        tfhub_module: feature_extractor_url,
        saved_model_dir: output_dir,
        logging_verbosity: 'INFO',
        checkpoint_path: '/tmp/_retrain_checkpoint'
    }
    retrain.run()

if __name__ =='__main__':
    main()