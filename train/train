#!/usr/bin/env python3

import tensorflow as tf
import tensorflow_hub as hub

from tensorflow.python.tools import optimize_for_inference_lib

import os
import sys
import json
import csv
import time
import math

import retrain
import flags

COACH_VERSION=1
__PROD__ = os.environ.get('LOCAL') != 'True'
prefix = '/opt/ml/'

def main():
    if __PROD__:
        print("Running in production")

        from environment import create_trainer_environment
        env = create_trainer_environment()
        
        platform = env.hyperparameters.get('platform', default='frozen', object_type=str)
        #epochs = env.hyperparameters.get('epochs', default=1, object_type=int)
        steps = env.hyperparameters.get('steps', default=5000, object_type=int)
        feature_extractor_url = os.path.join('models', env.hyperparameters.get('module', default="mobilenet_v2_100_224", object_type=str))
        data_root = env.channel_dirs['train']
        
        print('data_root: ' + data_root)
    else:
        import sys
        print('Running locally')
        
        platform = 'frozen'
        #epochs = 0
        steps = 5
        feature_extractor_url = sys.argv[1]
        data_root = tf.keras.utils.get_file(
            'flower_photos','https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz',
            untar=True)

    output_dir = os.path.join(prefix, 'model')
    if not os.path.isdir(output_dir):
        os.mkdir(output_dir)
    print('output_dir: ' + output_dir)

    '''
    if epochs > 0:
        steps = samples//batch_size
    '''

    retrain.FLAGS = flags.Flags(
        image_dir=str(data_root),
        output_graph=os.path.join(output_dir, 'frozen.pb'),
        intermediate_output_graphs_dir='/tmp/intermediate_graph/',
        intermediate_store_frequency=0,
        output_labels=os.path.join(output_dir, 'labels'),
        summaries_dir='/tmp/retrain_logs',
        how_many_training_steps=steps,
        learning_rate=0.01,
        testing_percentage=10,
        validation_percentage=10,
        eval_step_interval=10,
        train_batch_size=100,
        test_batch_size=1,
        validation_batch_size=100,
        print_misclassified_test_images=False,
        bottleneck_dir='/tmp/bottleneck',
        input_tensor_name='input',
        final_tensor_name='output',
        flip_left_right=False,
        random_crop=0,
        random_scale=0,
        random_brightness=0,
        tfhub_module=feature_extractor_url,
        saved_model_dir=os.path.join(output_dir, 'saved_model'),
        logging_verbosity='INFO',
        checkpoint_path='/tmp/_retrain_checkpoint',
        tf_lite=os.path.join(output_dir, 'mobile.tflite'),
        tfjs=os.path.join(output_dir, 'tfjs'),
        unity=os.path.join(output_dir, 'unity.bytes')
    )
    retrain.run()

    # Write our TF Version
    with open(os.path.join(output_dir, 'coach_version'), 'w') as coach_file:
        coach_file.write(str(COACH_VERSION))
    coach_file.close()

if __name__ =='__main__':
    main()
